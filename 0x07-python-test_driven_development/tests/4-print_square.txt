The ``4-print_square`` module
======================

Using ``print_square``
-------------------

First import
``print_square`` from the ``4-print_square`` module:

    >>> print_square = __import__("4-print_square").print_square

Now use it:

    #pep8 style
    >>> import os
    >>> os.popen("pep8 4-print_square.py").read()
    ''

    #Module comments
    >>> len_comment = len(__import__("4-print_square").__doc__)
    >>> len_comment > 4
    True

    #Function comments
    >>> len_comment = len(__import__("4-print_square").print_square.__doc__)
    >>> len_comment > 2
    True

    #Checking README file
    >>> import os
    >>> os.path.isfile('README.md')
    True

    #Checking executable file
    >>> import os
    >>> current_path = os.getcwd() + "/4-print_square.py"
    >>> os.access(current_path, os.X_OK)
    True

    #Checking first line of file
    >>> with open("4-print_square.py", "r") as file:
    ...     first_line = file.readline()
    ...
    >>> first_line == '#!/usr/bin/python3\n'
    True

    #Checking last line of file
    >>> with open("4-print_square.py", "r") as file:
    ...     for last_line in file:
    ...             pass
    ...
    >>> last_line[len(last_line) - 1] == '\n'
    True

    >>> print_square(-1.36)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    >>> print_square(20.4)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    >>> print_square("five")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    >>> print_square("")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    >>> print_square(None)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    >>> print_square([1, 2])
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    >>> print_square(-156)
    Traceback (most recent call last):
    ...
    ValueError: Size must be >= 0

    >>> print_square(0)

    >>> print_square(4)
    ####
    ####
    ####
    ####

    >>> print_square(1)
    #

    >>> print_square(2)
    ##
    ##
